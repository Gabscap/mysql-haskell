# NB: don't set `language: haskell` here

# explicitly request legacy non-sudo based build environment
sudo: required
dist: trusty

matrix:
    include:
      - services: mysql
        env: - GHCVER=7.8.4 CABALVER=1.18
        addons:
          apt:
            sources:
              - hvr-ghc
            packages:
              - cabal-install-1.18
              - ghc-7.8.4

      - services: mysql
        env: - GHCVER=7.10.2 CABALVER=1.22
        addons:
          apt:
            sources:
              - hvr-ghc
            packages:
              - cabal-install-1.22
              - ghc-7.10.2

      - services: mysql
        env: - GHCVER=head CABALVER=head
        addons:
          apt:
            sources:
              - hvr-ghc
            packages:
              - cabal-install-head
              - ghc-head

      - env: - GHCVER=7.10.2 CABALVER=1.22
        addons:
          apt:
            sources:
              - hvr-ghc
            packages:
              - cabal-install-1.22
              - ghc-7.10.2
              - mysql-server-5.6
              - mysql-client-core-5.6
              - mysql-client-5.6

# Note: the distinction between `before_install` and `install` is not important.
before_install:
- mysql -e "create database IF NOT EXISTS test-mysql-haskell;" -uroot

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 - cabal bench
 - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

